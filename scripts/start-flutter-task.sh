#!/bin/bash

# start-flutter-task.sh - Flutter Template Project ÁâπÂåñ„Çø„Çπ„ÇØËµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà

# set -e removed to prevent premature exits

# „Éë„É©„É°„Éº„ÇøËß£Êûê
TICKET_ID=""
WORKFLOW="flutter-feature"
BACKGROUND=true
PLATFORM="all"
DEVICE=""

# „Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®≠ÂÆö
PROJECT_NAME="Flutter Template Project"
FLUTTER_APP_DIR="apps"

while [[ $# -gt 0 ]]; do
    case $1 in
        --ticket=*)
            TICKET_ID="${1#*=}"
            shift
            ;;
        --workflow=*)
            WORKFLOW="${1#*=}"
            shift
            ;;
        --platform=*)
            PLATFORM="${1#*=}"
            shift
            ;;
        --device=*)
            DEVICE="${1#*=}"
            shift
            ;;
        --foreground)
            BACKGROUND=false
            shift
            ;;
        *)
            if [ -z "$TICKET_ID" ]; then
                TICKET_ID="$1"
            fi
            shift
            ;;
    esac
done

if [ -z "$TICKET_ID" ]; then
    echo "Usage: $0 --ticket=<TICKET_ID> [--workflow=<WORKFLOW>] [--platform=<PLATFORM>] [--foreground]"
    echo "Example: $0 --ticket=ABC-123 --workflow=flutter-feature --platform=android"
    echo ""
    echo "Available workflows:"
    echo "  flutter-feature     - New feature development"
    echo "  flutter-ui          - UI/UX improvements"
    echo "  flutter-bugfix      - Bug fixes"
    echo "  flutter-performance - Performance optimization"
    echo "  flutter-widget      - Widget development"
    echo ""
    echo "Available platforms: ios, android, web, all"
    exit 1
fi

# Ë®≠ÂÆö
WORKTREES_DIR="./worktrees"
LOGS_DIR="./logs"
PIDS_DIR="./pids"
CLAUDE_DIR=".claude"

# ÂøÖË¶Å„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
mkdir -p "$WORKTREES_DIR" "$LOGS_DIR" "$PIDS_DIR" "$CLAUDE_DIR/workflows" "$CLAUDE_DIR/prompts"

echo "üöÄ Starting Flutter task for ticket: $TICKET_ID"
echo "üìã Workflow: $WORKFLOW"
echo "üì± Platform: $PLATFORM"

# FlutterÁí∞Â¢ÉÁ¢∫Ë™ç
echo "üîç Checking Flutter environment..."
if ! command -v flutter &> /dev/null; then
    echo "‚ùå Flutter is not installed or not in PATH"
    exit 1
fi

# apps„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ≠òÂú®Á¢∫Ë™ç
if [ ! -d "$FLUTTER_APP_DIR" ]; then
    echo "‚ùå Flutter app directory not found: $FLUTTER_APP_DIR"
    exit 1
fi

FLUTTER_VERSION=$(flutter --version | head -n 1)
echo "‚úÖ $FLUTTER_VERSION"

# Flutter DoctorÁ¢∫Ë™çÔºàË≠¶Âëä„ÅØÁÑ°Ë¶ñÔºâ
echo "üîß Running flutter doctor..."
flutter doctor > /dev/null 2>&1 || echo "‚ö†Ô∏è  Flutter doctor has some issues, but continuing..."

# „Éñ„É©„É≥„ÉÅÂêç„Å®„Éá„Ç£„É¨„ÇØ„Éà„É™Âêç„ÇíÁîüÊàê
BRANCH_PREFIX="feature"
case $WORKFLOW in
    flutter-ui)
        BRANCH_PREFIX="ui"
        ;;
    flutter-bugfix)
        BRANCH_PREFIX="bugfix"
        ;;
    flutter-performance)
        BRANCH_PREFIX="perf"
        ;;
    flutter-widget)
        BRANCH_PREFIX="widget"
        ;;
esac

BRANCH_NAME="${BRANCH_PREFIX}-${TICKET_ID}"
WORKTREE_DIR="${WORKTREES_DIR}/${BRANCH_NAME}"

# Êó¢Â≠ò„ÅÆworktree„Çí„ÉÅ„Çß„ÉÉ„ÇØ
if [ -d "$WORKTREE_DIR" ]; then
    echo "‚ö†Ô∏è  Worktree already exists at $WORKTREE_DIR"
    echo "‚úÖ Continuing with existing worktree..."
else
    # Êñ∞„Åó„ÅÑworktree„Çí‰ΩúÊàê
    echo "üìÅ Creating worktree: $WORKTREE_DIR"
    git worktree add -b "$BRANCH_NAME" "$WORKTREE_DIR" main
fi

# FlutterÂõ∫Êúâ„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê
cat > "$WORKTREE_DIR/.claude_config.json" << EOF
{
  "project_name": "$PROJECT_NAME",
  "flutter_app_dir": "$FLUTTER_APP_DIR",
  "ticket_id": "$TICKET_ID",
  "workflow": "$WORKFLOW",
  "branch_name": "$BRANCH_NAME",
  "worktree_path": "$WORKTREE_DIR",
  "platform": "$PLATFORM",
  "device": "$DEVICE",
  "flutter_version": "$(flutter --version | head -n 1 | cut -d' ' -f2)",
  "created_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
  "project_root": "$(pwd)",
  "state_management": "riverpod",
  "i18n_system": "slang",
  "navigation": "go_router"
}
EOF

# „ÉØ„Éº„ÇØ„Éï„É≠„ÉºÂõ∫Êúâ„ÅÆCLAUDE.md„Çíworktree„Å´„Ç≥„Éî„Éº
if [ -f "$CLAUDE_DIR/workflows/${WORKFLOW}.md" ]; then
    cp "$CLAUDE_DIR/workflows/${WORKFLOW}.md" "$WORKTREE_DIR/CLAUDE.md"
    echo "üìÑ Copied workflow: $WORKFLOW.md ‚Üí CLAUDE.md"
else
    echo "‚ö†Ô∏è  Workflow file not found: $CLAUDE_DIR/workflows/${WORKFLOW}.md"
    echo "üìÑ Using default CLAUDE.md"
    cp "CLAUDE.md" "$WORKTREE_DIR/CLAUDE.md" 2>/dev/null || echo "‚ùå No default CLAUDE.md found"
fi

# FlutterÂõ∫Êúâ„Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„ÇíËøΩÂä†
if [ -f "$CLAUDE_DIR/prompts/context.md" ]; then
    echo "" >> "$WORKTREE_DIR/CLAUDE.md"
    echo "---" >> "$WORKTREE_DIR/CLAUDE.md"
    echo "" >> "$WORKTREE_DIR/CLAUDE.md"
    cat "$CLAUDE_DIR/prompts/context.md" >> "$WORKTREE_DIR/CLAUDE.md"
    echo "üìÑ Added Flutter context from: $CLAUDE_DIR/prompts/context.md"
fi

# „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âõ∫Êúâ„ÅÆÊÉÖÂ†±„ÇíËøΩÂä†
echo "" >> "$WORKTREE_DIR/CLAUDE.md"
echo "## ÁèæÂú®„ÅÆ„Çø„Çπ„ÇØÊÉÖÂ†±" >> "$WORKTREE_DIR/CLAUDE.md"
echo "" >> "$WORKTREE_DIR/CLAUDE.md"
echo "- **„ÉÅ„Ç±„ÉÉ„ÉàID**: $TICKET_ID" >> "$WORKTREE_DIR/CLAUDE.md"
echo "- **„ÉØ„Éº„ÇØ„Éï„É≠„Éº**: $WORKFLOW" >> "$WORKTREE_DIR/CLAUDE.md"
echo "- **ÂØæË±°„Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†**: $PLATFORM" >> "$WORKTREE_DIR/CLAUDE.md"
if [ ! -z "$DEVICE" ]; then
    echo "- **ÂØæË±°„Éá„Éê„Ç§„Çπ**: $DEVICE" >> "$WORKTREE_DIR/CLAUDE.md"
fi
echo "- **‰ΩúÊ•≠„Éñ„É©„É≥„ÉÅ**: $BRANCH_NAME" >> "$WORKTREE_DIR/CLAUDE.md"
echo "- **Flutter Version**: $(flutter --version | head -n 1)" >> "$WORKTREE_DIR/CLAUDE.md"

echo "üîç Debug: Attempting to cd to: $WORKTREE_DIR"
ls -la "$WORKTREE_DIR" && echo "‚úÖ Directory exists" || echo "‚ùå Directory not found"
if ! cd "$WORKTREE_DIR"; then
    echo "‚ùå Failed to change directory to $WORKTREE_DIR"
    echo "Current directory: $(pwd)"
    echo "Target directory: $WORKTREE_DIR"
    ls -la "$WORKTREES_DIR" 2>/dev/null || echo "Worktrees directory doesn't exist"
    echo "‚ö†Ô∏è  Continuing without changing directory..."
fi

# ÂàùÊúüFlutterÁí∞Â¢É„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó
echo "üì¶ Setting up Flutter environment..."
if ! cd "$FLUTTER_APP_DIR"; then
    echo "‚ùå Failed to change directory to $FLUTTER_APP_DIR"
    echo "‚ö†Ô∏è  Skipping Flutter setup..."
else
echo "üì¶ Running flutter pub get..."
if ! flutter pub get; then
    echo "‚ùå Flutter pub get failed, but continuing..."
fi

# „Ç≥„Éº„ÉâÁîüÊàê„ÅÆÂÆüË°å
echo "üîß Running code generation..."
echo "üîß Running build_runner..."
if ! flutter pub run build_runner build --delete-conflicting-outputs; then
    echo "‚ö†Ô∏è  Code generation skipped (no generated files yet)"
fi

# ÂõΩÈöõÂåñ„Éï„Ç°„Ç§„É´ÁîüÊàê
echo "üåê Generating i18n files..."
echo "üåê Running slang build..."
if ! dart run slang build; then
    echo "‚ö†Ô∏è  i18n generation skipped"
fi
fi

if ! cd "$WORKTREE_DIR"; then
    echo "‚ùå Failed to change directory to $WORKTREE_DIR"
    echo "‚ö†Ô∏è  Continuing from current directory..."
fi

# „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âõ∫Êúâ„ÅÆÊ∫ñÂÇô
case $PLATFORM in
    ios)
        echo "üçé Preparing iOS environment..."
        if [ -d "$FLUTTER_APP_DIR/ios" ]; then
            echo "üçé Installing iOS pods..."
            cd "$FLUTTER_APP_DIR/ios" && pod install && cd "$WORKTREE_DIR" || echo "‚ö†Ô∏è  Pod install failed"
        fi
        ;;
    android)
        echo "ü§ñ Preparing Android environment..."
        # AndroidÂõ∫Êúâ„ÅÆÊ∫ñÂÇô„Åå„ÅÇ„Çå„Å∞ËøΩÂä†
        ;;
    web)
        echo "üåê Preparing Web environment..."
        echo "üåê Enabling web support..."
        flutter config --enable-web || echo "‚ö†Ô∏è  Web config failed"
        ;;
    all)
        echo "üì± Preparing all platforms..."
        if [ -d "$FLUTTER_APP_DIR/ios" ]; then
            echo "üçé Installing iOS pods..."
            cd "$FLUTTER_APP_DIR/ios" && pod install && cd "$WORKTREE_DIR" || echo "‚ö†Ô∏è  Pod install failed"
        fi
        echo "üåê Enabling web support..."
        flutter config --enable-web || echo "‚ö†Ô∏è  Web config failed"
        ;;
esac

# Claude CodeËµ∑Âãï„Ç≥„Éû„É≥„Éâ„ÇíÊßãÁØâ
CLAUDE_CMD="claude-code --ticket=$TICKET_ID"

# „Éó„É©„ÉÉ„Éà„Éï„Ç©„Éº„É†Âõ∫Êúâ„Éë„É©„É°„Éº„ÇøËøΩÂä†
if [ "$PLATFORM" != "all" ]; then
    CLAUDE_CMD="$CLAUDE_CMD --platform=$PLATFORM"
fi

if [ ! -z "$DEVICE" ]; then
    CLAUDE_CMD="$CLAUDE_CMD --device=$DEVICE"
fi

# Ë®≠ÂÆö„Éï„Ç°„Ç§„É´„Åã„ÇâËøΩÂä†„Éë„É©„É°„Éº„Çø„ÇíË™≠„ÅøËæº„Åø
CONFIG_FILE="$CLAUDE_DIR/config.json"
if [ -f "$CONFIG_FILE" ]; then
    echo "‚öôÔ∏è  Loading Flutter project config: $CONFIG_FILE"
    if command -v jq &> /dev/null; then
        MAX_TIME=$(jq -r '.execution.maxExecutionTime // 300' "$CONFIG_FILE")
        if [ "$MAX_TIME" != "null" ] && [ "$MAX_TIME" != "300" ]; then
            CLAUDE_CMD="$CLAUDE_CMD --max-time=$MAX_TIME"
        fi
    fi
fi

echo "ü§ñ Starting Claude Code for Flutter development..."
echo "üìÇ Working directory: $WORKTREE_DIR"
echo "üîß Command: $CLAUDE_CMD"

if [ "$BACKGROUND" = true ]; then
    # „Éê„ÉÉ„ÇØ„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂÆüË°å
    nohup $CLAUDE_CMD > "../logs/claude-flutter-${TICKET_ID}.log" 2>&1 &
    CLAUDE_PID=$!
    
    echo "‚úÖ Claude Code started in background"
    echo "üÜî PID: $CLAUDE_PID"
    echo "üìÑ Log: ../logs/claude-flutter-${TICKET_ID}.log"
    
    # PID„Çí‰øùÂ≠ò
    echo "$CLAUDE_PID" > "../pids/claude-flutter-${TICKET_ID}.pid"
    
    echo ""
    echo "Monitor progress:"
    echo "  tail -f logs/claude-flutter-${TICKET_ID}.log"
    echo ""
    echo "Flutter specific monitoring:"
    echo "  flutter logs (if device connected)"
    echo "  flutter analyze"
    echo "  flutter test"
    echo ""
    echo "Manage task:"
    echo "  ./scripts/manage-flutter-tasks.sh status $TICKET_ID"
    echo "  ./scripts/manage-flutter-tasks.sh stop $TICKET_ID"
    echo "  ./scripts/manage-flutter-tasks.sh screenshot $TICKET_ID"
else
    # „Éï„Ç©„Ç¢„Ç∞„É©„Ç¶„É≥„Éâ„ÅßÂÆüË°å
    echo "üéØ Running in foreground mode..."
    echo "üí° Tip: Use 'flutter logs' in another terminal to monitor device logs"
    echo "‚ñ∂Ô∏è  Executing: $CLAUDE_CMD"
    $CLAUDE_CMD
fi

echo ""
echo "üéâ Flutter task setup completed for ticket: $TICKET_ID"
echo "üî• Happy Flutter development! üöÄ"
name: Auto Tag PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

concurrency:
  group: auto-tag-${{ github.ref }}
  cancel-in-progress: true

jobs:
  auto-tag:
    name: Auto Tag PR by Changed Workspace
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Check for file changes and determine workspace
        id: check_changes
        uses: ./.github/actions/check-changes
        with:
          base_sha: ${{ github.event.pull_request.base.sha }}
          head_sha: ${{ github.event.pull_request.head.sha }}

      - name: Auto tag workspaces dynamically
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const labelsToAdd = [];

            // Get changed workspaces and tags from check-changes action
            const changedWorkspaces = '${{ steps.check_changes.outputs.changed_workspaces }}';
            const changedTags = '${{ steps.check_changes.outputs.changed_tags }}';
            const allTags = '${{ steps.check_changes.outputs.all_tags }}';

            // Add workspace-specific labels
            if (changedWorkspaces && changedWorkspaces.trim() !== '') {
              // Add general workspace label
              labelsToAdd.push('workspace');
              
              // Split and add specific workspace labels
              const workspaces = changedWorkspaces.trim().split(' ');
              workspaces.forEach(workspace => {
                if (workspace) {
                  labelsToAdd.push(workspace);
                }
              });
              
              console.log(`Detected changed workspaces: ${workspaces.join(', ')}`);
            }

            // Add directory-based tags
            if (changedTags && changedTags.trim() !== '') {
              const tags = changedTags.trim().split(' ');
              tags.forEach(tag => {
                if (tag) {
                  labelsToAdd.push(tag);
                }
              });
              
              console.log(`Detected directory-based tags: ${tags.join(', ')}`);
            }

            if (labelsToAdd.length > 0) {
              console.log(`Adding labels: ${labelsToAdd.join(', ')}`);
              
              // Define label colors based on type
              const getColor = (label) => {
                if (label === 'workspace') return '1d76db';
                if (label === 'CI') return 'e99695';
                if (label === 'documentation') return '0075ca';
                if (label === 'script') return 'fbca04';
                return '0969da'; // Default color for workspace labels
              };

              // Create labels that don't exist
              for (const label of labelsToAdd) {
                try {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label,
                    color: getColor(label)
                  });
                } catch (error) {
                  // Label already exists, which is fine
                  if (error.status !== 422) {
                    console.log(`Error creating label ${label}: ${error.message}`);
                  }
                }
              }
              
              // Add labels to PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: labelsToAdd
              });
            } else {
              console.log('No workspace or directory changes detected, no labels added');
            }
